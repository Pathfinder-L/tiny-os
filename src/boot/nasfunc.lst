     1 00000000                                 ; naskfunc
     2 00000000                                 ; TAB=4
     3 00000000                                 
     4 00000000                                 [FORMAT "WCOFF"]				; 僆僽僕僃僋僩僼傽僀儖傪嶌傞儌乕僪
     5 00000000                                 [INSTRSET "i486p"]				; 486偺柦椷傑偱巊偄偨偄偲偄偆婰弎
     6 00000000                                 [BITS 32]						; 32價僢僩儌乕僪梡偺婡夿岅傪嶌傜偣傞
     7 00000000                                 [FILE "naskfunc.nas"]			; 僜乕僗僼傽僀儖柤忣曬
     8 00000000                                 
     9 00000000                                 		GLOBAL	_io_hlt, _io_cli, _io_sti, _io_stihlt
    10 00000000                                 		GLOBAL	_io_in8,  _io_in16,  _io_in32
    11 00000000                                 		GLOBAL	_io_out8, _io_out16, _io_out32
    12 00000000                                 		GLOBAL	_io_load_eflags, _io_store_eflags
    13 00000000                                 		GLOBAL	_load_gdtr, _load_idtr , _store_cr0 ,_load_cr0
    14 00000000                                 		GLOBAL	_asm_inthandler21, _asm_inthandler27, _asm_inthandler2c,_asm_inthandler20
    15 00000000                                 		GLOBAL  _memtest_sub
    16 00000000                                 		GLOBAL	_farjmp
    17 00000000                                 		EXTERN	_inthandler21, _inthandler27, _inthandler2c,_inthandler20
    18 00000000                                 
    19                                          [SECTION .text]
    20 00000000                                 
    21 00000000                                 _io_hlt:	; void io_hlt(void);
    22 00000000 F4                              		HLT
    23 00000001 C3                              		RET
    24 00000002                                 
    25 00000002                                 _io_cli:	; void io_cli(void);
    26 00000002 FA                              		CLI
    27 00000003 C3                              		RET
    28 00000004                                 
    29 00000004                                 _io_sti:	; void io_sti(void);
    30 00000004 FB                              		STI
    31 00000005 C3                              		RET
    32 00000006                                 
    33 00000006                                 _io_stihlt:	; void io_stihlt(void);
    34 00000006 FB                              		STI
    35 00000007 F4                              		HLT
    36 00000008 C3                              		RET
    37 00000009                                 
    38 00000009                                 _io_in8:	; int io_in8(int port);
    39 00000009 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    40 0000000D B8 00000000                     		MOV		EAX,0
    41 00000012 EC                              		IN		AL,DX
    42 00000013 C3                              		RET
    43 00000014                                 
    44 00000014                                 _io_in16:	; int io_in16(int port);
    45 00000014 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    46 00000018 B8 00000000                     		MOV		EAX,0
    47 0000001D 66 ED                           		IN		AX,DX
    48 0000001F C3                              		RET
    49 00000020                                 
    50 00000020                                 _io_in32:	; int io_in32(int port);
    51 00000020 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    52 00000024 ED                              		IN		EAX,DX
    53 00000025 C3                              		RET
    54 00000026                                 
    55 00000026                                 _io_out8:	; void io_out8(int port, int data);
    56 00000026 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    57 0000002A 8A 44 24 08                     		MOV		AL,[ESP+8]		; data
    58 0000002E EE                              		OUT		DX,AL
    59 0000002F C3                              		RET
    60 00000030                                 
    61 00000030                                 _io_out16:	; void io_out16(int port, int data);
    62 00000030 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    63 00000034 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    64 00000038 66 EF                           		OUT		DX,AX
    65 0000003A C3                              		RET
    66 0000003B                                 
    67 0000003B                                 _io_out32:	; void io_out32(int port, int data);
    68 0000003B 8B 54 24 04                     		MOV		EDX,[ESP+4]		; port
    69 0000003F 8B 44 24 08                     		MOV		EAX,[ESP+8]		; data
    70 00000043 EF                              		OUT		DX,EAX
    71 00000044 C3                              		RET
    72 00000045                                 
    73 00000045                                 _io_load_eflags:	; int io_load_eflags(void);
    74 00000045 9C                              		PUSHFD		; PUSH EFLAGS 偲偄偆堄枴
    75 00000046 58                              		POP		EAX
    76 00000047 C3                              		RET
    77 00000048                                 
    78 00000048                                 _io_store_eflags:	; void io_store_eflags(int eflags);
    79 00000048 8B 44 24 04                     		MOV		EAX,[ESP+4]
    80 0000004C 50                              		PUSH	EAX
    81 0000004D 9D                              		POPFD		; POP EFLAGS 偲偄偆堄枴
    82 0000004E C3                              		RET
    83 0000004F                                 
    84 0000004F                                 _load_gdtr:		; void load_gdtr(int limit, int addr);
    85 0000004F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    86 00000054 66 89 44 24 06                  		MOV		[ESP+6],AX
    87 00000059 0F 01 54 24 06                  		LGDT	[ESP+6]
    88 0000005E C3                              		RET
    89 0000005F                                 
    90 0000005F                                 _load_idtr:		; void load_idtr(int limit, int addr);
    91 0000005F 66 8B 44 24 04                  		MOV		AX,[ESP+4]		; limit
    92 00000064 66 89 44 24 06                  		MOV		[ESP+6],AX
    93 00000069 0F 01 5C 24 06                  		LIDT	[ESP+6]
    94 0000006E C3                              		RET
    95 0000006F                                 
    96 0000006F                                 
    97 0000006F                                 _memtest_sub: ; unsigned int memtest_sub(unsigned int start,unsigned int end);
    98 0000006F 57                                      push edi
    99 00000070 56                                      push esi
   100 00000071 53                                      push ebx
   101 00000072 BE AA55AA55                             mov esi, 0xaa55aa55
   102 00000077 BF 55AA55AA                             mov edi, 0x55aa55aa
   103 0000007C 8B 44 24 10                             mov eax, [esp + 12 + 4]
   104 00000080                                 
   105 00000080                                 
   106 00000080                                 
   107 00000080                                 
   108 00000080                                 mts_loop:
   109 00000080 89 C3                                   mov ebx,eax
   110 00000082 81 C3 00000FFC                          add ebx,0xffc
   111 00000088 8B 13                                   mov edx,[ebx]
   112 0000008A 89 33                                   mov [ebx],esi
   113 0000008C 83 33 FF                                xor dword [ebx],0xffffffff
   114 0000008F 3B 3B                                   cmp edi,[ebx]
   115 00000091 75 18                                   jne mts_fin
   116 00000093 83 33 FF                                xor dword [ebx],0xffffffff
   117 00000096 3B 33                                   cmp esi,[ebx]
   118 00000098 75 11                                   jne mts_fin
   119 0000009A 89 13                                   mov [ebx],edx
   120 0000009C 05 00001000                             add eax,0x1000
   121 000000A1 3B 44 24 14                             cmp eax,[esp+12+8]
   122 000000A5 76 D9                                   jbe mts_loop
   123 000000A7 5B                                      pop ebx
   124 000000A8 5E                                      pop esi
   125 000000A9 5F                                      pop edi
   126 000000AA C3                                      ret
   127 000000AB                                 
   128 000000AB                                 mts_fin:
   129 000000AB 89 13                                   mov [ebx],edx
   130 000000AD 5B                                      pop ebx
   131 000000AE 5E                                      pop esi
   132 000000AF 5F                                      pop edi
   133 000000B0 C3                                      ret
   134 000000B1                                 
   135 000000B1                                 
   136 000000B1                                 _asm_inthandler21:
   137 000000B1 06                              		PUSH	ES
   138 000000B2 1E                              		PUSH	DS
   139 000000B3 60                              		PUSHAD
   140 000000B4 89 E0                           		MOV		EAX,ESP
   141 000000B6 50                              		PUSH	EAX
   142 000000B7 66 8C D0                        		MOV		AX,SS
   143 000000BA 8E D8                           		MOV		DS,AX
   144 000000BC 8E C0                           		MOV		ES,AX
   145 000000BE E8 [00000000]                   		CALL	_inthandler21
   146 000000C3 58                              		POP		EAX
   147 000000C4 61                              		POPAD
   148 000000C5 1F                              		POP		DS
   149 000000C6 07                              		POP		ES
   150 000000C7 CF                              		IRETD
   151 000000C8                                 
   152 000000C8                                 _asm_inthandler27:
   153 000000C8 06                              		PUSH	ES
   154 000000C9 1E                              		PUSH	DS
   155 000000CA 60                              		PUSHAD
   156 000000CB 89 E0                           		MOV		EAX,ESP
   157 000000CD 50                              		PUSH	EAX
   158 000000CE 66 8C D0                        		MOV		AX,SS
   159 000000D1 8E D8                           		MOV		DS,AX
   160 000000D3 8E C0                           		MOV		ES,AX
   161 000000D5 E8 [00000000]                   		CALL	_inthandler27
   162 000000DA 58                              		POP		EAX
   163 000000DB 61                              		POPAD
   164 000000DC 1F                              		POP		DS
   165 000000DD 07                              		POP		ES
   166 000000DE CF                              		IRETD
   167 000000DF                                 
   168 000000DF                                 _asm_inthandler2c:
   169 000000DF 06                              		PUSH	ES
   170 000000E0 1E                              		PUSH	DS
   171 000000E1 60                              		PUSHAD
   172 000000E2 89 E0                           		MOV		EAX,ESP
   173 000000E4 50                              		PUSH	EAX
   174 000000E5 66 8C D0                        		MOV		AX,SS
   175 000000E8 8E D8                           		MOV		DS,AX
   176 000000EA 8E C0                           		MOV		ES,AX
   177 000000EC E8 [00000000]                   		CALL	_inthandler2c
   178 000000F1 58                              		POP		EAX
   179 000000F2 61                              		POPAD
   180 000000F3 1F                              		POP		DS
   181 000000F4 07                              		POP		ES
   182 000000F5 CF                              		IRETD
   183 000000F6                                 
   184 000000F6                                 _asm_inthandler20:
   185 000000F6 06                              		PUSH	ES
   186 000000F7 1E                              		PUSH	DS
   187 000000F8 60                              		PUSHAD
   188 000000F9 89 E0                           		MOV		EAX,ESP
   189 000000FB 50                              		PUSH	EAX
   190 000000FC 66 8C D0                        		MOV		AX,SS
   191 000000FF 8E D8                           		MOV		DS,AX
   192 00000101 8E C0                           		MOV		ES,AX
   193 00000103 E8 [00000000]                   		CALL	_inthandler20
   194 00000108 58                              		POP		EAX
   195 00000109 61                              		POPAD
   196 0000010A 1F                              		POP		DS
   197 0000010B 07                              		POP		ES
   198 0000010C CF                              		IRETD
   199 0000010D                                 
   200 0000010D                                 _load_cr0:		; int load_cr0(void);
   201 0000010D 0F 20 C0                        		MOV		EAX,CR0
   202 00000110 C3                              		RET
   203 00000111                                 
   204 00000111                                 _store_cr0:		; void store_cr0(int cr0);
   205 00000111 8B 44 24 04                     		MOV		EAX,[ESP+4]
   206 00000115 0F 22 C0                        		MOV		CR0,EAX
   207 00000118 C3                              		RET
   208 00000119                                 
   209 00000119                                 _farjmp:		; void farjmp(int eip, int cs);
   210 00000119 FF 6C 24 04                     		JMP		FAR	[ESP+4]				; eip, cs
   211 0000011D C3                              		RET