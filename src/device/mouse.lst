     1 00000000                                 [FORMAT "WCOFF"]
     2 00000000                                 [INSTRSET "i486p"]
     3 00000000                                 [OPTIMIZE 1]
     4 00000000                                 [OPTION 1]
     5 00000000                                 [BITS 32]
     6 00000000                                 	EXTERN	_io_out8
     7 00000000                                 	EXTERN	_io_in8
     8 00000000                                 	EXTERN	_fifo32_put
     9 00000000                                 	EXTERN	_wait_KBC_sendready
    10 00000000                                 [FILE "mouse.c"]
    11                                          [SECTION .text]
    12 00000000                                 	GLOBAL	_inthandler2c
    13 00000000                                 _inthandler2c:
    14 00000000 55                              	PUSH	EBP
    15 00000001 89 E5                           	MOV	EBP,ESP
    16 00000003 6A 64                           	PUSH	100
    17 00000005 68 000000A0                     	PUSH	160
    18 0000000A E8 [00000000]                   	CALL	_io_out8
    19 0000000F 6A 62                           	PUSH	98
    20 00000011 6A 20                           	PUSH	32
    21 00000013 E8 [00000000]                   	CALL	_io_out8
    22 00000018 6A 60                           	PUSH	96
    23 0000001A E8 [00000000]                   	CALL	_io_in8
    24 0000001F 03 05 [00000004]                	ADD	EAX,DWORD [_mouse_offset]
    25 00000025 50                              	PUSH	EAX
    26 00000026 FF 35 [00000000]                	PUSH	DWORD [_mousefifo]
    27 0000002C E8 [00000000]                   	CALL	_fifo32_put
    28 00000031 C9                              	LEAVE
    29 00000032 C3                              	RET
    30 00000033                                 	GLOBAL	_enable_mouse
    31 00000033                                 _enable_mouse:
    32 00000033 55                              	PUSH	EBP
    33 00000034 89 E5                           	MOV	EBP,ESP
    34 00000036 8B 45 08                        	MOV	EAX,DWORD [8+EBP]
    35 00000039 A3 [00000000]                   	MOV	DWORD [_mousefifo],EAX
    36 0000003E 8B 45 0C                        	MOV	EAX,DWORD [12+EBP]
    37 00000041 A3 [00000004]                   	MOV	DWORD [_mouse_offset],EAX
    38 00000046 E8 [00000000]                   	CALL	_wait_KBC_sendready
    39 0000004B 68 000000D4                     	PUSH	212
    40 00000050 6A 64                           	PUSH	100
    41 00000052 E8 [00000000]                   	CALL	_io_out8
    42 00000057 E8 [00000000]                   	CALL	_wait_KBC_sendready
    43 0000005C 58                              	POP	EAX
    44 0000005D 5A                              	POP	EDX
    45 0000005E C7 45 0C 000000F4               	MOV	DWORD [12+EBP],244
    46 00000065 C7 45 08 00000060               	MOV	DWORD [8+EBP],96
    47 0000006C C9                              	LEAVE
    48 0000006D E9 [00000000]                   	JMP	_io_out8
    49 00000072                                 	GLOBAL	_mouse_decode
    50 00000072                                 _mouse_decode:
    51 00000072 55                              	PUSH	EBP
    52 00000073 89 E5                           	MOV	EBP,ESP
    53 00000075 56                              	PUSH	ESI
    54 00000076 53                              	PUSH	EBX
    55 00000077 8B 55 08                        	MOV	EDX,DWORD [8+EBP]
    56 0000007A 8B 4D 0C                        	MOV	ECX,DWORD [12+EBP]
    57 0000007D 89 CE                           	MOV	ESI,ECX
    58 0000007F 8A 42 03                        	MOV	AL,BYTE [3+EDX]
    59 00000082 84 C0                           	TEST	AL,AL
    60 00000084 75 11                           	JNE	L4
    61 00000086 80 F9 FA                        	CMP	CL,-6
    62 00000089 74 06                           	JE	L13
    63 0000008B                                 L12:
    64 0000008B 31 C0                           	XOR	EAX,EAX
    65 0000008D                                 L3:
    66 0000008D 5B                              	POP	EBX
    67 0000008E 5E                              	POP	ESI
    68 0000008F 5D                              	POP	EBP
    69 00000090 C3                              	RET
    70 00000091                                 L13:
    71 00000091 C6 42 03 01                     	MOV	BYTE [3+EDX],1
    72 00000095 EB F4                           	JMP	L12
    73 00000097                                 L4:
    74 00000097 3C 01                           	CMP	AL,1
    75 00000099 74 61                           	JE	L14
    76 0000009B 3C 02                           	CMP	AL,2
    77 0000009D 74 54                           	JE	L15
    78 0000009F 3C 03                           	CMP	AL,3
    79 000000A1 74 05                           	JE	L16
    80 000000A3 83 C8 FF                        	OR	EAX,-1
    81 000000A6 EB E5                           	JMP	L3
    82 000000A8                                 L16:
    83 000000A8 8A 1A                           	MOV	BL,BYTE [EDX]
    84 000000AA 81 E6 000000FF                  	AND	ESI,255
    85 000000B0 89 D8                           	MOV	EAX,EBX
    86 000000B2 88 4A 02                        	MOV	BYTE [2+EDX],CL
    87 000000B5 83 E0 07                        	AND	EAX,7
    88 000000B8 89 72 08                        	MOV	DWORD [8+EDX],ESI
    89 000000BB 89 42 0C                        	MOV	DWORD [12+EDX],EAX
    90 000000BE 88 D8                           	MOV	AL,BL
    91 000000C0 0F B6 4A 01                     	MOVZX	ECX,BYTE [1+EDX]
    92 000000C4 83 E0 10                        	AND	EAX,16
    93 000000C7 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    94 000000CA C6 42 03 01                     	MOV	BYTE [3+EDX],1
    95 000000CE 84 C0                           	TEST	AL,AL
    96 000000D0 74 09                           	JE	L10
    97 000000D2 81 C9 FFFFFF00                  	OR	ECX,-256
    98 000000D8 89 4A 04                        	MOV	DWORD [4+EDX],ECX
    99 000000DB                                 L10:
   100 000000DB 83 E3 20                        	AND	EBX,32
   101 000000DE 84 DB                           	TEST	BL,BL
   102 000000E0 74 07                           	JE	L11
   103 000000E2 81 4A 08 FFFFFF00               	OR	DWORD [8+EDX],-256
   104 000000E9                                 L11:
   105 000000E9 F7 5A 08                        	NEG	DWORD [8+EDX]
   106 000000EC B8 00000001                     	MOV	EAX,1
   107 000000F1 EB 9A                           	JMP	L3
   108 000000F3                                 L15:
   109 000000F3 88 4A 01                        	MOV	BYTE [1+EDX],CL
   110 000000F6 C6 42 03 03                     	MOV	BYTE [3+EDX],3
   111 000000FA EB 8F                           	JMP	L12
   112 000000FC                                 L14:
   113 000000FC 83 E6 C8                        	AND	ESI,-56
   114 000000FF 89 F0                           	MOV	EAX,ESI
   115 00000101 3C 08                           	CMP	AL,8
   116 00000103 75 86                           	JNE	L12
   117 00000105 88 0A                           	MOV	BYTE [EDX],CL
   118 00000107 C6 42 03 02                     	MOV	BYTE [3+EDX],2
   119 0000010B E9 FFFFFF7B                     	JMP	L12
   120 00000110                                 	GLOBAL	_mousefifo
   121                                          [SECTION .data]
   122 00000000                                 	ALIGNB	4
   123 00000000                                 _mousefifo:
   124 00000000 00 00 00 00                     	RESB	4
   125 00000004                                 	GLOBAL	_mouse_offset
   126                                          [SECTION .data]
   127 00000004                                 	ALIGNB	4
   128 00000004                                 _mouse_offset:
   129 00000004 00 00 00 00                     	RESB	4
